{"version":3,"sources":["components/SideDrawer/SideDrawerToggleButton.js","components/ToolBar/ToolBar.js","components/SideDrawer/SideDrawer.js","components/Backdrop/Backdrop.js","App.js","serviceWorker.js","index.js"],"names":["SideDrawerToggleButton","props","onClick","togglenavbar","className","ToolBar","togglesidenav","href","SideDrawer","toggleClass","open","Backdrop","close","App","state","sidenavopen","handleclickButtonToggle","setState","prevState","handlecloseSideNav","backdropopen","this","style","height","marginTop","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+VAIe,SAASA,EAAuBC,GAC3C,OACI,4BAAQC,QAASD,EAAME,aAAcC,UAAU,iBAC3C,yBAAKA,UAAU,oBACf,yBAAKA,UAAU,oBACf,yBAAKA,UAAU,qBCLZ,SAASC,EAAQJ,GAC5B,OACI,4BAAQG,UAAU,WACd,yBAAKA,UAAU,sBAEX,yBAAKA,UAAU,mBACX,kBAACJ,EAAD,CAAwBG,aAAcF,EAAMK,iBAGhD,yBAAKF,UAAU,gBACX,uBAAGG,KAAK,SAAR,aAGJ,yBAAKH,UAAU,WACf,yBAAKA,UAAU,yBACX,4BACI,wBAAIA,UAAU,gBAAe,uBAAGG,KAAK,IAAR,SAC7B,wBAAIH,UAAU,gBAAe,uBAAGG,KAAK,IAAR,UAC7B,wBAAIH,UAAU,gBAAe,uBAAGG,KAAK,IAAR,gB,MCnBtC,SAASC,EAAWP,GAC/B,IAAIQ,EAAc,aAKlB,OAJGR,EAAMS,OACLD,EAAc,0BAId,yBAAKL,UAAWK,GACZ,4BACA,wBAAIL,UAAU,gBAAe,uBAAGG,KAAK,IAAR,SAC7B,wBAAIH,UAAU,gBAAe,uBAAGG,KAAK,IAAR,UAC7B,wBAAIH,UAAU,gBAAe,uBAAGG,KAAK,IAAR,c,MCX1B,SAASI,EAASV,GAC7B,OACI,yBAAKC,QAASD,EAAMW,MAAOR,UAAU,a,ICkD9BS,E,2MA/CbC,MAAQ,CACNC,aAAa,G,EAGfC,wBAAyB,WACvB,EAAKC,UAAS,SAACC,GACb,MAAQ,CACNH,aAAcG,EAAUH,iB,EAK9BI,mBAAqB,WACnB,EAAKF,SAAS,CACZF,aAAa,K,wEAOf,IAAIK,EAMJ,OAJIC,KAAKP,MAAMC,cACbK,EAAe,kBAAC,EAAD,CAAUR,MAAOS,KAAKF,sBAIrC,yBAAKG,MAAO,CAACC,OAAQ,SACnB,kBAAClB,EAAD,CAASC,cAAee,KAAKL,0BAC7B,kBAACR,EAAD,CAAYE,KAAMW,KAAKP,MAAMC,cAC5BK,EAGF,0BAAME,MAAO,CAACE,UAAW,WACzB,4D,GArCWC,IAAMC,WCMJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.969c23f6.chunk.js","sourcesContent":["import React from 'react';\nimport './SideToggleButton.css';\n\n\nexport default function SideDrawerToggleButton(props) {\n    return (\n        <button onClick={props.togglenavbar} className=\"button-toggle\">\n            <div className=\"btn-toggle-line\"></div>\n            <div className=\"btn-toggle-line\"></div>\n            <div className=\"btn-toggle-line\"></div>\n        </button>\n    )\n}\n","import React from 'react'\nimport './Toolbar.css'\nimport SideDrawerToggleButton from '../SideDrawer/SideDrawerToggleButton'\n\nexport default function ToolBar(props) {\n    return (\n        <header className=\"toolbar\">\n            <nav className=\"toolbar_navigation\">\n                {/* ambarger */}\n                <div className=\"toolbar_ambager\">\n                    <SideDrawerToggleButton togglenavbar={props.togglesidenav} />\n                </div>\n                {/* logo */}\n                <div className=\"toolbar_logo\">\n                    <a href=\"#home\">The Logo</a>\n                </div>\n                {/* link items */}\n                <div className=\"spacer\" />\n                <div className=\"toolbar_nav_container\">\n                    <ul>\n                        <li className=\"toolbar_item\"><a href=\"\">Home</a></li>\n                        <li className=\"toolbar_item\"><a href=\"\">about</a></li>\n                        <li className=\"toolbar_item\"><a href=\"\">contact</a></li>\n\n                    </ul>\n                </div>\n            </nav>\n        </header>\n    )\n}\n","import React from 'react'\nimport './sideDrawer.css'\n\nexport default function SideDrawer(props) {\n    let toggleClass = 'sideDrawer';\n    if(props.open) {\n        toggleClass = 'sideDrawer openSideNav';\n\n    }\n    return (\n        <nav className={toggleClass}>\n            <ul>\n            <li className=\"toolbar_item\"><a href=\"\">Home</a></li>\n            <li className=\"toolbar_item\"><a href=\"\">about</a></li>\n            <li className=\"toolbar_item\"><a href=\"\">contact</a></li>\n            </ul>\n        </nav>\n    )\n}\n","import React from 'react'\nimport './Backdrop.css'\n\nexport default function Backdrop(props) {\n    return (\n        <div onClick={props.close} className=\"backdrop\" />\n            \n        \n    )\n}\n","import React from 'react';\nimport './App.css';\nimport ToolBar from './components/ToolBar/ToolBar'\nimport SideDrawer from './components/SideDrawer/SideDrawer'\nimport Backdrop from './components/Backdrop/Backdrop'\n\nclass App extends React.Component {\n\n  state = {\n    sidenavopen: false\n  }\n\n  handleclickButtonToggle= () => {\n    this.setState((prevState)=> {\n      return ({\n        sidenavopen: !prevState.sidenavopen\n      })\n    })\n\n  }\n  handlecloseSideNav = () => {\n    this.setState({\n      sidenavopen: false\n    })\n  }\n\n\n\n  render () {\n    let backdropopen;\n\n    if (this.state.sidenavopen) { \n      backdropopen = <Backdrop close={this.handlecloseSideNav} />\n\n    }\n    return (\n      <div style={{height: '100%'}}>\n        <ToolBar togglesidenav={this.handleclickButtonToggle} />\n        <SideDrawer open={this.state.sidenavopen} />\n        {backdropopen}\n       \n        \n       <main style={{marginTop: '3.2rem'}}>\n       <p>this is content bellow </p>\n       </main>\n  \n       \n      \n      </div>\n    );\n\n  }\n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}